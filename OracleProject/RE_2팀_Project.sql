--[TEAM2 로 연결]===============================================================

SELECT USER
FROM DUAL;
--==>> TEAM2

--[더미 데이터 입력]============================================================

-- 관리자테이블 더미데이터 입력
INSERT INTO TBL_ADMIN(ADMIN_ID, ADMIN_PW)
VALUES('ADMIN1', '0001');
--==>> 1 행 이(가) 삽입되었습니다.


-- 교수테이블 더미데이터 입력
INSERT INTO TBL_PRO(PROFESSOR_ID, PROFESSOR_PW, PROFESSOR_NAME, PROFESSOR_SSN, PROFESSOR_JOIN)
VALUES('PRO1' ,'1234567', '김호진', '1234567', SYSDATE);
--==>> 1 행 이(가) 삽입되었습니다.


-- 학생테이블 더미데이터 입력
INSERT INTO TBL_STUDENT(STUDENT_ID, STUDENT_PW, STUDENT_NAME, STUDENT_SSN, STUDENT_JOIN)
VALUES('20220001', '1214423', '최선하', '1214423', SYSDATE);
INSERT INTO TBL_STUDENT(STUDENT_ID, STUDENT_PW, STUDENT_NAME, STUDENT_SSN, STUDENT_JOIN)
VALUES('20220002', '2234567', '임소민', '2234567', SYSDATE);
INSERT INTO TBL_STUDENT(STUDENT_ID, STUDENT_PW, STUDENT_NAME, STUDENT_SSN, STUDENT_JOIN)
VALUES('20220003', '1553767', '오이삭', '1553767', SYSDATE);
INSERT INTO TBL_STUDENT(STUDENT_ID, STUDENT_PW, STUDENT_NAME, STUDENT_SSN, STUDENT_JOIN)
VALUES('20220004', '2655472', '박현지', '2655472', SYSDATE);
--==>> 1 행 이(가) 삽입되었습니다. * 4



-- 탈락사유테이블 더미데이터 입력
INSERT INTO TBL_REASON(REASON_CODE, REASON_DROPOUT)
VALUES('REASON1', '개인사정');
INSERT INTO TBL_REASON(REASON_CODE, REASON_DROPOUT)
VALUES('REASON2', '조기취업');
--==>> 1 행 이(가) 삽입되었습니다. * 2


-- 과목테이블 더미데이터 입력
INSERT INTO TBL_SUBJECT(SUBJECT_CODE, SUBJECT_NAME)
VALUES('S1', 'JAVA');
INSERT INTO TBL_SUBJECT(SUBJECT_CODE, SUBJECT_NAME)
VALUES('S2', 'ORACLE');
INSERT INTO TBL_SUBJECT(SUBJECT_CODE, SUBJECT_NAME)
VALUES('S3', 'HTML');
--==>> 1 행 이(가) 삽입되었습니다. * 3



-- 교재테이블 더미데이터 입력
INSERT INTO TBL_BOOK(BOOK_CODE, BOOK_NAME)
VALUES('BOOK1', 'JAVA의 정석');
INSERT INTO TBL_BOOK(BOOK_CODE, BOOK_NAME)
VALUES('BOOK2', '오라클SQL');
--==>> 1 행 이(가) 삽입되었습니다. * 2


-- 과정테이블 더미데이터 입력
INSERT INTO TBL_COURSE(COURSE_CODE, COURSE_NAME)
VALUES('COURSE1', '프론트엔드');
INSERT INTO TBL_COURSE(COURSE_CODE, COURSE_NAME)
VALUES('COURSE2', '백엔드');
INSERT INTO TBL_COURSE(COURSE_CODE, COURSE_NAME)
VALUES('COURSE3', '풀스택');
--==>> 1 행 이(가) 삽입되었습니다. * 3



-- 강의실테이블 더미데이터 입력
INSERT INTO TBL_ROOM(ROOM_CODE, ROOM_NAME)
VALUES('ROOM1', 'F강의장');
INSERT INTO TBL_ROOM(ROOM_CODE, ROOM_NAME)
VALUES('ROOM2', 'G강의장');
--==>> 1 행 이(가) 삽입되었습니다. * 2



-- 과정개설테이블 더미데이터 입력
INSERT INTO TBL_COPEN(COP_CODE, COURSE_CODE, COP_START, COP_END, ROOM_CODE, COP_DATE)
VALUES('COPEN1', 'COURSE1', '2021-12-30', '2022-06-20', 'ROOM1', '2021-11-10');
--==>> 1 행 이(가) 삽입되었습니다.



-- 수강신청테이블 더미데이터 입력
INSERT INTO TBL_REGIST(REGIST_CODE, STUDENT_ID, COP_CODE, REGIST_DATE)
VALUES('REGIST1', '20220001', 'COPEN1', '2021-12-15');
--==>> 1 행 이(가) 삽입되었습니다.

-- 도중탈락테이블 더미데이터 입력
INSERT INTO TBL_FAIL(FAIL_CODE, REGIST_CODE, FAIL_DATE, REASON_CODE)
VALUES('FAIL1', 'REGIST1', '2022-03-01', 'REASON1');
--==>> 1 행 이(가) 삽입되었습니다.

-- 과목개설테이블 더미데이터 입력
INSERT INTO TBL_SOPEN(SOP_CODE, SUBJECT_CODE, SOP_START, SOP_END, PROFESSOR_ID, COP_CODE
                    , SOP_SILGI, SOP_PILGI, SOP_CHUL, BOOK_CODE, SOP_DATE)
VALUES('SOP1', 'S1', '2022-01-03', '2022-02-27', 'PRO1', 'COPEN1', 40, 40, 20, 'BOOK1', '2021-11-20');
--==>> 1 행 이(가) 삽입되었습니다. 


-- 성적테이블 더미데이터 입력
INSERT INTO TBL_GRADE(GRADE_CODE, GRADE_SILGI, GRADE_PILGI, GRADE_CHUL, REGIST_CODE, SOP_CODE, GRADE_DATE)
VALUES('GRADE1', 80, 90, 70, 'REGIST1', 'SOP1', '2022-02-28');
--==>> 1 행 이(가) 삽입되었습니다.

-- 전부 삭제 (학생, 관리자 제외)
DELETE FROM TBL_GRADE;
DELETE FROM TBL_SOPEN;
DELETE FROM TBL_FAIL;
DELETE FROM TBL_REGIST;
DELETE FROM TBL_COPEN;
DELETE FROM TBL_ROOM;
DELETE FROM TBL_COURSE;
DELETE FROM TBL_BOOK;
DELETE FROM TBL_SUBJECT;
DELETE FROM TBL_REASON;
DELETE FROM TBL_PRO;
DELETE FROM TBL_ADMIN;
DELETE FROM TBL_STUDENT;

-- 테이블 확인 구문
SELECT * FROM TBL_ADMIN;
SELECT * FROM TBL_STUDENT;
SELECT * FROM TBL_PRO;
SELECT * FROM TBL_FAIL;
SELECT * FROM TBL_SOPEN;
SELECT * FROM TBL_GRADE;
SELECT * FROM TBL_REGIST;
SELECT * FROM TBL_COPEN;
SELECT * FROM TBL_ROOM;
SELECT * FROM TBL_COURSE;
SELECT * FROM TBL_BOOK;
SELECT * FROM TBL_SUBJECT;
SELECT * FROM TBL_REASON;

COMMIT;


--==============================================================================

--[테이블]======================================================================
CREATE TABLE TBL_ORAUSERTEST
( NO   NUMBER(10)
, NAME VARCHAR2(30)
);
--==>> Table TBL_ORAUSERTEST이(가) 생성되었습니다.


SELECT *
FROM TBL_ORAUSERTEST;
--==>> 테이블 생성 완료. 빈 테이블.

SELECT *
FROM USER_TS_QUOTAS;
--==>> TBS_TEAM2	65536	-1	8	-1	NO
-- -1은 무제한 이라는 의미.



--[관리자테이블 생성]===========================================================
CREATE TABLE TBL_ADMIN
( ADMIN_ID    VARCHAR2(20)  
, ADMIN_PW    VARCHAR2(20) CONSTRAINT ADMIN_ADMIN_PW_NN NOT NULL
, CONSTRAINT ADMIN_ADMIN_ID_PK PRIMARY KEY(ADMIN_ID)
);
--==>> Table TBL_ADMIN이(가) 생성되었습니다.
--==============================================================================



--[교수테이블 생성]=============================================================
CREATE TABLE TBL_PRO
( PROFESSOR_ID    VARCHAR2(20)
, PROFESSOR_PW    VARCHAR2(20) CONSTRAINT PRO_PROFESSOR_PW_NN NOT NULL
, PROFESSOR_NAME  VARCHAR2(20) CONSTRAINT PRO_PROFESSOR_NAME_NN NOT NULL
, PROFESSOR_SSN   CHAR(7)      CONSTRAINT PRO_PROFESSOR_SSN_NN NOT NULL
, PROFESSOR_JOIN  DATE         CONSTRAINT PRO_PROFESSOR_JOIN_NN NOT NULL
, CONSTRAINT PRO_PROFESSOR_ID_PK PRIMARY KEY(PROFESSOR_ID)
);

-- 교수테이블 제약조건
ALTER TABLE TBL_PRO
ADD CONSTRAINT PRO_PROFESSOR_SSN_UK UNIQUE(PROFESSOR_SSN);
--==>> Table TBL_PRO이(가) 생성되었습니다.
--==============================================================================


--[학생테이블 생성]=============================================================
CREATE TABLE TBL_STUDENT
( STUDENT_ID   VARCHAR2(20)
, STUDENT_PW   VARCHAR2(20) CONSTRAINT STUDENT_STUDENT_PW_NN NOT NULL
, STUDENT_NAME VARCHAR2(30) CONSTRAINT STUDENT_STUDENT_NAME_NN NOT NULL
, STUDENT_SSN  CHAR(7)      CONSTRAINT STUDENT_STUDENT_SSN_NN NOT NULL
, STUDENT_JOIN DATE         CONSTRAINT STUDENT_STUDENT_JOIN_NN NOT NULL
, CONSTRAINT STUDENT_STUDENT_ID_PK PRIMARY KEY(STUDENT_ID)
);

-- 학생테이블 제약조건
ALTER TABLE TBL_STUDENT
ADD CONSTRAINT STUDENT_STUDENT_SSN_UK UNIQUE (STUDENT_SSN);

--==>> Table TBL_STUDENT이(가) 생성되었습니다.
--==============================================================================



--[도중탈락 테이블 생성]=========================================================
CREATE TABLE TBL_FAIL
( FAIL_CODE     VARCHAR2(20)
, REGIST_CODE   VARCHAR2(20)  CONSTRAINT FAIL_REGIST_CODE_NN NOT NULL
, FAIL_DATE     DATE          CONSTRAINT FAIL_FAIL_DATE_NN NOT NULL
, REASON_CODE   VARCHAR2(20)  CONSTRAINT FAIL_REASON_CODE_NN NOT NULL
, CONSTRAINT FAIL_FAIL_CODE_PK PRIMARY KEY(FAIL_CODE)
);
--==>> Table TBL_FAIL이(가) 생성되었습니다.


ALTER TABLE TBL_FAIL
ADD ( CONSTRAINT FAIL_REGIST_CODE_FK FOREIGN KEY (REGIST_CODE)
                REFERENCES TBL_REGIST (REGIST_CODE)  
   , CONSTRAINT FAIL_REASON_CODE_FK FOREIGN KEY (REASON_CODE)
                REFERENCES TBL_REASON (REASON_CODE) );
--==>> Table TBL_FAIL이(가) 변경되었습니다.
--==============================================================================





--[탈락사유 테이블 생성]========================================================
CREATE TABLE TBL_REASON
( REASON_CODE     VARCHAR2(20)
, REASON_DROPOUT  VARCHAR2(50)  CONSTRAINT REASON_REASON_DROPOUT_NN NOT NULL
, CONSTRAINT REASON_REASON_CODE_PK PRIMARY KEY (REASON_CODE)
);
--==>> Table TBL_REASON이(가) 생성되었습니다.
--==============================================================================




--[과목 테이블 생성]============================================================
CREATE TABLE TBL_SUBJECT
( SUBJECT_CODE  VARCHAR2(20)
, SUBJECT_NAME  VARCHAR2(20) CONSTRAINT SUBJECT_SUBJECT_NAME_NN NOT NULL
, CONSTRAINT SUBJECT_SUBJECT_CODE_PK PRIMARY KEY (SUBJECT_CODE)
);
--==>> Table TBL_SUBJECT이(가) 생성되었습니다.
--==============================================================================




--[교재 테이블 생성]============================================================
CREATE TABLE TBL_BOOK
( BOOK_CODE VARCHAR2(20)
, BOOK_NAME VARCHAR2(20) CONSTRAINT BOOK_BOOK_NAME_NN NOT NULL
, CONSTRAINT BOOK_BOOK_CODE_PK PRIMARY KEY (BOOK_CODE)
);
--==>> Table TBL_BOOK이(가) 생성되었습니다.
--==============================================================================




--[과정 테이블 생성]============================================================
CREATE TABLE TBL_COURSE
( COURSE_CODE  VARCHAR2(20)
, COURSE_NAME  VARCHAR2(20) CONSTRAINT COURSE_COURSE_NAME_NN NOT NULL
, CONSTRAINT COURSE_COURSE_CODE_PK PRIMARY KEY (COURSE_CODE)
);
--==>> Table TBL_COURSE이(가) 생성되었습니다.
--==============================================================================




--[강의 테이블 생성]============================================================
CREATE TABLE TBL_ROOM
( ROOM_CODE VARCHAR2(20)
, ROOM_NAME VARCHAR2(20) CONSTRAINT ROOM_ROOM_NAME_NN NOT NULL
, CONSTRAINT ROOM_ROOM_CODE_PK PRIMARY KEY(ROOM_CODE)
);
--==>> Table TBL_ROOM이(가) 생성되었습니다.
--==============================================================================





--[과정개설 테이블 생성]========================================================
CREATE TABLE TBL_COPEN
( COP_CODE      VARCHAR2(20)
, COURSE_CODE   VARCHAR2(20)
, COP_START     DATE  
, COP_END       DATE
, ROOM_CODE     VARCHAR2(20)
, COP_DATE      DATE         CONSTRAINT COPEN_COP_DATE_NN NOT NULL
, CONSTRAINT COPEN_COP_CODE_PK PRIMARY KEY(COP_CODE)
, CONSTRAINT COPEN_COP_DATE_INTERVAL_CK CHECK ( COP_START < COP_END )
);
--==>> Table TBL_COPEN이(가) 생성되었습니다.


ALTER TABLE TBL_COPEN
ADD ( CONSTRAINT COPEN_COURSE_CODE_FK FOREIGN KEY (COURSE_CODE)
                REFERENCES TBL_COURSE (COURSE_CODE)
    , CONSTRAINT COPEN_ROOM_CODE_FK FOREIGN KEY (ROOM_CODE)
                REFERENCES TBL_ROOM (ROOM_CODE) );
--==>> Table TBL_COPEN이(가) 변경되었습니다.
--==============================================================================




--[수강신청 테이블 생성]========================================================
CREATE TABLE TBL_REGIST
( REGIST_CODE VARCHAR2(20)
, STUDENT_ID   VARCHAR2(20)
, COP_CODE     VARCHAR2(20)
, REGIST_DATE  DATE  CONSTRAINT REGIST_REGIST_DATE_NN NOT NULL
, CONSTRAINT REGIST_REGIST_CODE_PK PRIMARY KEY(REGIST_CODE)
);
--==>> Table TBL_REGIST이(가) 생성되었습니다.


ALTER TABLE TBL_REGIST
ADD ( CONSTRAINT REGIST_STUDENT_ID_FK FOREIGN KEY(STUDENT_ID)
                REFERENCES TBL_STUDENT (STUDENT_ID)
  , CONSTRAINT REGIST_COP_CODE_FK FOREIGN KEY(COP_CODE)
                REFERENCES TBL_COPEN (COP_CODE) );
--==>> Table TBL_REGIST이(가) 변경되었습니다.
--==============================================================================





--[성적 테이블 생성]============================================================

CREATE TABLE TBL_GRADE
( GRADE_CODE   VARCHAR2(20)
, GRADE_SILGI  NUMBER
, GRADE_PILGI  NUMBER
, GRADE_CHUL   NUMBER
, REGIST_CODE  VARCHAR2(20)
, SOP_CODE     VARCHAR2(20)
, GRADE_DATE   DATE          CONSTRAINT GRADE_GRADE_DATE_NN NOT NULL
, CONSTRAINT GRADE_GRADE_CODE_PK PRIMARY KEY(GRADE_CODE)
);
--==>> Table TBL_GRADE이(가) 생성되었습니다.


ALTER TABLE TBL_GRADE
ADD ( CONSTRAINT GRADE_REGIST_CODE_FK FOREIGN KEY (REGIST_CODE)
                REFERENCES TBL_REGIST (REGIST_CODE)
    , CONSTRAINT GRADE_SOP_CODE_FK FOREIGN KEY (SOP_CODE)
                REFERENCES TBL_SOPEN (SOP_CODE) 
    , CONSTRAINT GRADE_GRADE_SILGI_CK CHECK(GRADE_SILGI BETWEEN 0 AND 100)
    , CONSTRAINT GRADE_GRADE_PILGI_CK CHECK(GRADE_PILGI BETWEEN 0 AND 100)
    , CONSTRAINT GRADE_GRADE_CHUL_CK CHECK(GRADE_CHUL BETWEEN 0 AND 100)
    );
--==>> Table TBL_GRADE이(가) 변경되었습니다.
--==============================================================================




--[과목개설 테이블 생성]========================================================
CREATE TABLE TBL_SOPEN
( SOP_CODE      VARCHAR2(20)
, SUBJECT_CODE  VARCHAR2(20)
, SOP_START     DATE
, SOP_END       DATE
, PROFESSOR_ID  VARCHAR2(20)
, COP_CODE      VARCHAR2(20)
, SOP_SILGI     NUMBER
, SOP_PILGI     NUMBER
, SOP_CHUL      NUMBER
, BOOK_CODE     VARCHAR2(20)
, SOP_DATE      DATE         CONSTRAINT SOPEN_SOP_DATE_NN NOT NULL
, CONSTRAINT SOPEN_SOP_CODE_PK PRIMARY KEY (SOP_CODE)
, CONSTRAINT SOPEN_SOP_DATE_INTERVAL_CK CHECK ( SOP_START < SOP_END )
, CONSTRAINT SOPEN_SCORE_SUM_CK CHECK (SOP_SILGI + SOP_PILGI + SOP_CHUL = 100)
);
--==>> Table TBL_SOPEN이(가) 생성되었습니다.


ALTER TABLE TBL_SOPEN
ADD ( CONSTRAINT SOPEN_SUBJECT_CODE_FK FOREIGN KEY (SUBJECT_CODE)
                REFERENCES TBL_SUBJECT (SUBJECT_CODE)
    , CONSTRAINT SOPEN_PROFESSOR_ID_FK FOREIGN KEY (PROFESSOR_ID)
                REFERENCES TBL_PRO (PROFESSOR_ID)
    , CONSTRAINT SOPEN_COP_CODE_FK FOREIGN KEY (COP_CODE)
                REFERENCES TBL_COPEN (COP_CODE)
    , CONSTRAINT SOPEN_BOOK_CODE_FK FOREIGN KEY (BOOK_CODE)
                REFERENCES TBL_BOOK (BOOK_CODE) );
--==============================================================================

SELECT *
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'TBL_SOPEN';

--==============================================================================

--[프로시저]====================================================================

-- 교수 INSERT 프로시저
CREATE OR REPLACE PROCEDURE PRC_PRO_INSERT
( V_PROFESSOR_ID   IN TBL_PRO.PROFESSOR_ID%TYPE
, V_PROFESSOR_NAME IN TBL_PRO.PROFESSOR_NAME%TYPE
, V_PROFESSOR_SSN  IN TBL_PRO.PROFESSOR_SSN%TYPE
)
IS
    V_PROFESSOR_PW TBL_PRO.PROFESSOR_PW%TYPE;
BEGIN
    
    V_PROFESSOR_PW := V_PROFESSOR_SSN;
    
    INSERT INTO TBL_PRO(PROFESSOR_ID, PROFESSOR_PW, PROFESSOR_NAME, PROFESSOR_SSN, PROFESSOR_JOIN)
    VALUES(V_PROFESSOR_ID, V_PROFESSOR_PW, V_PROFESSOR_NAME, V_PROFESSOR_SSN, SYSDATE);
    
    COMMIT;
END;
--==>> Procedure PRC_PROFESSOR_INSERT이(가) 컴파일되었습니다.

-- 교수 UPDATE 프로시저
CREATE OR REPLACE PROCEDURE PRC_RPO_UPDATE
( V_PROFESSOR_ID   IN TBL_PRO.PROFESSOR_ID%TYPE
, V_PROFESSOR_NAME IN TBL_PRO.PROFESSOR_NAME%TYPE
, V_PROFESSOR_PW   IN TBL_PRO.PROFESSOR_PW%TYPE
)
IS
    --예외추가
    USER_DEFINE_ERROR EXCEPTION;
    V_COUNT           NUMBER;
BEGIN
    
    SELECT COUNT(PROFESSOR_ID) INTO V_COUNT
    FROM TBL_PRO
    WHERE PROFESSOR_ID = V_PROFESSOR_ID;
    
    IF(V_COUNT = 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    UPDATE TBL_PRO
    SET PROFESSOR_NAME = V_PROFESSOR_NAME, PROFESSOR_PW = V_PROFESSOR_PW
    WHERE PROFESSOR_ID = V_PROFESSOR_ID;
    
    COMMIT; 
    
    EXCEPTION
    WHEN USER_DEFINE_ERROR
        THEN RAISE_APPLICATION_ERROR(-20003, '조회되는 ID가 없습니다.');
             ROLLBACK;
        WHEN OTHERS
             THEN ROLLBACK;
END;


-- 교수 DELETE 프로시저
CREATE OR REPLACE PROCEDURE PRC_PRO_DELETE
( V_PROFESSOR_ID  IN TBL_PRO.PROFESSOR_ID%TYPE
)
IS
    USER_DEFINE_ERROR EXCEPTION;
    V_COUNT           NUMBER;
BEGIN
    
    SELECT COUNT(PROFESSOR_ID) INTO V_COUNT
    FROM TBL_PRO
    WHERE PROFESSOR_ID = V_PROFESSOR_ID;
    
    IF(V_COUNT = 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    DELETE FROM TBL_PRO
    WHERE PROFESSOR_ID = V_PROFESSOR_ID;
    
    COMMIT;
    
    EXCEPTION
    WHEN USER_DEFINE_ERROR
        THEN RAISE_APPLICATION_ERROR(-20003, '조회되는 ID가 없습니다.');
             ROLLBACK;
        WHEN OTHERS
             THEN ROLLBACK;
END;


-- 학생 INSERT 프로시저
CREATE OR REPLACE PROCEDURE PRC_STUDENT_INSERT
( V_STUDENT_ID   IN TBL_STUDENT.STUDENT_ID%TYPE
, V_STUDENT_NAME IN TBL_STUDENT.STUDENT_NAME%TYPE
, V_STUDENT_SSN  IN TBL_STUDENT.STUDENT_SSN%TYPE
)
IS
    V_STUDENT_PW TBL_STUDENT.STUDENT_PW%TYPE;
BEGIN

    V_STUDENT_PW := V_STUDENT_SSN;
    
    INSERT INTO TBL_STUDENT(STUDENT_ID, STUDENT_PW, STUDENT_NAME, STUDENT_SSN, STUDENT_JOIN)
    VALUES(V_STUDENT_ID, V_STUDENT_PW, V_STUDENT_NAME, V_STUDENT_SSN, SYSDATE);
    
    COMMIT;
END;

-- 학생 UPDATE 프로시저
CREATE OR REPLACE PROCEDURE PRC_STUDENT_UPDATE
( V_STUDENT_ID   IN TBL_STUDENT.STUDENT_ID%TYPE
, V_STUDENT_NAME IN TBL_STUDENT.STUDENT_NAME%TYPE
, V_STUDENT_PW   IN TBL_STUDENT.STUDENT_PW%TYPE
)
IS
    --예외추가
    USER_DEFINE_ERROR EXCEPTION;
    V_COUNT           NUMBER;
BEGIN
    SELECT COUNT(STUDENT_ID) INTO V_COUNT
    FROM TBL_STUDENT
    WHERE STUDENT_ID = V_STUDENT_ID;
    
    IF(V_COUNT = 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    UPDATE TBL_STUDENT
    SET STUDENT_NAME = V_STUDENT_NAME, STUDENT_PW = V_STUDENT_PW
    WHERE STUDENT_ID = V_STUDENT_ID;
    
    COMMIT; 
    
    EXCEPTION
    WHEN USER_DEFINE_ERROR
        THEN RAISE_APPLICATION_ERROR(-20003, '조회되는 ID가 없습니다.');
             ROLLBACK;
        WHEN OTHERS
             THEN ROLLBACK;
END;


-- 학생 DELETE 프로시저
CREATE OR REPLACE PROCEDURE PRC_STUDENT_DELETE
( V_STUDENT_ID  IN TBL_STUDENT.STUDENT_ID%TYPE
)
IS
    USER_DEFINE_ERROR EXCEPTION;
    V_COUNT           NUMBER;
BEGIN
    
    SELECT COUNT(STUDENT_ID) INTO V_COUNT
    FROM TBL_STUDENT
    WHERE STUDENT_ID = V_STUDENT_ID;
    
    IF(V_COUNT = 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    
    DELETE FROM TBL_STUDENT
    WHERE STUDENT_ID = V_STUDENT_ID;
    
    COMMIT;
    
    EXCEPTION
    WHEN USER_DEFINE_ERROR
        THEN RAISE_APPLICATION_ERROR(-20003, '조회되는 ID가 없습니다.');
             ROLLBACK;
        WHEN OTHERS
             THEN ROLLBACK;
END;

--[입력, 수정, 삭제 프로시저 끝]================================================


--[로그인 프로시저]=============================================================
-- 관리자 로그인 프로시저
CREATE OR REPLACE PROCEDURE PRC_ADMIN_LOGIN
( V_USERID  IN TBL_ADMIN.ADMIN_ID%TYPE
, V_USERPW  IN TBL_ADMIN.ADMIN_PW%TYPE
)
IS
    V_COUNT NUMBER;
BEGIN
    
    SELECT COUNT(ADMIN_ID) INTO V_COUNT
    FROM TBL_ADMIN
    WHERE ADMIN_ID = V_USERID AND ADMIN_PW = V_USERPW;
    
    IF (V_COUNT > 0 )
        THEN DBMS_OUTPUT.PUT_LINE(V_USERID || '님 로그인 성공.');
    ELSE
             DBMS_OUTPUT.PUT_LINE('로그인 실패. 아이디와 패스워드를 확인해주세요.');
    END IF;
END;

-- 교수 로그인 프로시저
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_LOGIN
( V_USERID  IN TBL_PRO.PROFESSOR_ID%TYPE
, V_USERPW  IN TBL_PRO.PROFESSOR_PW%TYPE
)
IS
    V_COUNT NUMBER;
BEGIN
    
    SELECT COUNT(PROFESSOR_ID) INTO V_COUNT
    FROM TBL_PRO
    WHERE PROFESSOR_ID = V_USERID AND PROFESSOR_PW = V_USERPW;
    
    IF (V_COUNT > 0 )
        THEN DBMS_OUTPUT.PUT_LINE(V_USERID || '님 로그인 성공.');
    ELSE
             DBMS_OUTPUT.PUT_LINE('로그인 실패. 아이디와 패스워드를 확인해주세요.');
    END IF;
END;


-- 학생 로그인 프로시저
CREATE OR REPLACE PROCEDURE PRC_STUDENT_LOGIN
( V_USERID  IN TBL_STUDENT.STUDENT_ID%TYPE
, V_USERPW  IN TBL_STUDENT.STUDENT_PW%TYPE
)
IS
    V_COUNT NUMBER;
BEGIN
    
    SELECT COUNT(STUDENT_ID) INTO V_COUNT
    FROM TBL_STUDENT
    WHERE STUDENT_ID = V_USERID AND STUDENT_PW = V_USERPW;
    
    IF (V_COUNT > 0 )
        THEN DBMS_OUTPUT.PUT_LINE(V_USERID || '님 로그인 성공.');
    ELSE
             DBMS_OUTPUT.PUT_LINE('로그인 실패. 아이디와 패스워드를 확인해주세요.');
    END IF;
END;

-- 로그인 프로시저
CREATE OR REPLACE PROCEDURE PRC_LOGIN
( V_USER IN NUMBER
, V_USERID IN TBL_ADMIN.ADMIN_ID%TYPE
, V_USERPW IN TBL_ADMIN.ADMIN_PW%TYPE
)
IS
    USER_ERROR EXCEPTION;
    ID_PW_ERROR EXCEPTION;
BEGIN
    
    IF (V_USER = 1 ) -- 관리자
        THEN PRC_ADMIN_LOGIN(V_USERID, V_USERPW);
    ELSIF (V_USER = 2) -- 교수자
        THEN PRC_PROFESSOR_LOGIN(V_USERID, V_USERPW);
    ELSIF (V_USER = 3) -- 학생
        THEN PRC_STUDENT_LOGIN(V_USERID, V_USERPW);
    ELSIF ( V_USER != 1 AND V_USER != 2 AND V_USER != 3 )
        THEN RAISE USER_ERROR;
    ELSE
        RAISE ID_PW_ERROR;
    END IF;
    
    EXCEPTION
    WHEN USER_ERROR
        THEN RAISE_APPLICATION_ERROR(-20001, '사용자 선택 오류.');
             ROLLBACK;
    WHEN ID_PW_ERROR
        THEN RAISE_APPLICATION_ERROR(-20002, 'ID / PW 입력 오류.');
             ROLLBACK;
    WHEN OTHERS
        THEN ROLLBACK;
    
END;


--[로그인 프로시저 끝]==========================================================


-- 과목 배정 교수자 변경 (관리자)
CREATE OR REPLACE PROCEDURE PRC_SOP_PRO_UPDATE
(
  V_SOP_CODE     IN TBL_SOPEN.SOP_CODE%TYPE
, V_PROFESSOR_ID IN TBL_PRO.PROFESSOR_ID%TYPE
)
IS
    USER_DEFINE_ERROR EXCEPTION;
    V_COUNT  NUMBER;
BEGIN

    SELECT COUNT(PROFESSOR_ID) INTO V_COUNT
    FROM TBL_PRO
    WHERE PROFESSOR_ID = V_PROFESSOR_ID;
    
    IF (V_COUNT = 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
        
    UPDATE TBL_SOPEN
    SET PROFESSOR_ID = V_PROFESSOR_ID
    WHERE SOP_CODE = V_SOP_CODE;
    
    COMMIT;
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20003, '조회되는 ID가 없습니다');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;
--==>> Procedure PRC_SOP_PRO_UPDATE이(가) 컴파일되었습니다.

-- 과목 정보 입력, 수정, 삭제 (관리자)

-- 과목 교재 입력
CREATE OR REPLACE PROCEDURE PRC_BOOK_INSERT
(
    V_BOOK_NAME IN TBL_BOOK.BOOK_NAME%TYPE
)
IS
    V_BOOK_CODE  TBL_BOOK.BOOK_CODE%TYPE;
    V_COUNT NUMBER;
    V_NUM   NUMBER;
BEGIN

    SELECT COUNT(BOOK_CODE) INTO V_COUNT
    FROM TBL_BOOK
    WHERE BOOK_NAME = V_BOOK_NAME;
    
    SELECT MAX(TO_NUMBER(SUBSTR(BOOK_CODE,5)))+1 INTO V_NUM
    FROM TBL_BOOK;
    
    V_BOOK_CODE := 'BOOK' || TO_CHAR(V_NUM);
    
    IF (V_COUNT = 0)
        THEN INSERT INTO TBL_BOOK(BOOK_CODE, BOOK_NAME)
        VALUES(V_BOOK_CODE,V_BOOK_NAME);
    END IF;
    
END;
--==>> Procedure PRC_BOOK_INSERT이(가) 컴파일되었습니다.
-- 과목명 입력
CREATE OR REPLACE PROCEDURE PRC_SUBJECT_INSERT
(
    V_SUBJECT_NAME IN TBL_SUBJECT.SUBJECT_NAME%TYPE
)
IS
    V_SUBJECT_CODE  TBL_SUBJECT.SUBJECT_CODE%TYPE;
    V_COUNT NUMBER;
    V_NUM   NUMBER;
BEGIN
    SELECT COUNT(SUBJECT_CODE) INTO V_COUNT
    FROM TBL_SUBJECT
    WHERE SUBJECT_NAME = V_SUBJECT_NAME;
    
    SELECT MAX(TO_NUMBER(SUBSTR(SUBJECT_CODE,2)))+1 INTO V_NUM
    FROM TBL_SUBJECT;
    
    V_SUBJECT_CODE := 'S' || TO_CHAR(V_NUM);
    
    IF (V_COUNT = 0)
        THEN INSERT INTO TBL_SUBJECT(SUBJECT_CODE, SUBJECT_NAME)
        VALUES(V_SUBJECT_CODE,V_SUBJECT_NAME);
    END IF;
END;
--==>> Procedure PRC_SUBJECT_INSERT이(가) 컴파일되었습니다.

-- 과목 정보 입력(관리자)
-- SOP_CODE, SUBJECT_CODE, SOP_START, SOP_END, PROFESSOR_ID, COP_CODE , SOP_SILGI, SOP_PILGI, SOP_CHUL, BOOK_CODE, SOP_DATE
CREATE OR REPLACE PROCEDURE PRC_SOP_INSERT
( 
  V_SUBJECT_CODE    IN TBL_SUBJECT.SUBJECT_CODE%TYPE
, V_SOP_START       IN TBL_SOPEN.SOP_START%TYPE
, V_SOP_END         IN TBL_SOPEN.SOP_END%TYPE
, V_PROFESSOR_ID    IN TBL_SOPEN.PROFESSOR_ID%TYPE
, V_COP_CODE        IN TBL_SOPEN.COP_CODE%TYPE
, V_SOP_SILGI       IN TBL_SOPEN.SOP_SILGI%TYPE
, V_SOP_PILGI       IN TBL_SOPEN.SOP_PILGI%TYPE
, V_SOP_CHUL        IN TBL_SOPEN.SOP_CHUL%TYPE
, V_BOOK_CODE       IN TBL_BOOK.BOOK_CODE%TYPE
, V_SOP_DATE        IN TBL_SOPEN.SOP_DATE%TYPE
)
IS
    V_SOP_CODE  TBL_SOPEN.SOP_CODE%TYPE;
    V_NUM       NUMBER;
    
BEGIN
    
    SELECT MAX(TO_NUMBER(SUBSTR(SOP_CODE,4)))+1 INTO V_NUM
    FROM TBL_SOPEN;
    
    V_SOP_CODE := 'SOP' || TO_CHAR(V_NUM);
    
    INSERT INTO TBL_SOPEN(SOP_CODE, SUBJECT_CODE, SOP_START, SOP_END, PROFESSOR_ID, COP_CODE , SOP_SILGI, SOP_PILGI, SOP_CHUL, BOOK_CODE, SOP_DATE)
    VALUES(V_SOP_CODE, V_SUBJECT_CODE, V_SOP_START, V_SOP_END, V_PROFESSOR_ID, 
            V_COP_CODE, V_SOP_SILGI, V_SOP_PILGI, V_SOP_CHUL, V_BOOK_CODE, V_SOP_DATE);
    
END;
--==>> Procedure PRC_SOP_INSERT이(가) 컴파일되었습니다.

-- 과목 삭제
CREATE OR REPLACE PROCEDURE PRC_SOP_DELETE
(
 V_SOP_CODE IN TBL_SOPEN.SOP_CODE%TYPE
)
IS
    V_COUNT             NUMBER;
    USER_DEFINE_ERROR   EXCEPTION;
    DATE_ERROR          EXCEPTION;
    
    V_SOP_START TBL_SOPEN.SOP_START%TYPE;
    V_SOP_END   TBL_SOPEN.SOP_END%TYPE;
    
BEGIN
    
    SELECT COUNT(SOP_CODE) INTO V_COUNT
    FROM TBL_GRADE
    WHERE SOP_CODE = V_SOP_CODE;
    
    IF (V_COUNT > 0 )
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    SELECT SOP_START, SOP_END INTO V_SOP_START, V_SOP_END
    FROM TBL_SOPEN
    WHERE SOP_CODE = V_SOP_CODE;
    
    IF (V_SOP_START < SYSDATE AND V_SOP_END > SYSDATE)
        THEN RAISE DATE_ERROR;
    END IF;
    
    DELETE FROM TBL_SOPEN
    WHERE SOP_CODE = V_SOP_CODE;
    
    COMMIT;
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20006, '이미 입력된 성적이 있습니다.');
            ROLLBACK;
        WHEN DATE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20007, '과목이 진행중입니다.');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    
END;
--==>> Procedure PRC_SOP_DELETE이(가) 컴파일되었습니다.

-- 과정 정보 입력, 수정, 삭제 (관리자)
-- 과정 입력
CREATE OR REPLACE PROCEDURE PRC_ROOM_INSERT
(
    V_ROOM_NAME IN TBL_ROOM.ROOM_NAME%TYPE
)
IS
    V_COUNT NUMBER;
    V_NUM NUMBER;
    V_ROOM_CODE TBL_ROOM.ROOM_CODE%TYPE;
BEGIN

    SELECT COUNT(ROOM_CODE) INTO V_COUNT
    FROM TBL_ROOM
    WHERE ROOM_NAME = V_ROOM_NAME;
    
    SELECT MAX(TO_NUMBER(SUBSTR(ROOM_CODE,5)))+1 INTO V_NUM
    FROM TBL_ROOM;
    
    V_ROOM_CODE := 'ROOM' || TO_CHAR(V_NUM);
    
    IF (V_COUNT = 0)
        THEN INSERT INTO TBL_ROOM(ROOM_CODE, ROOM_NAME)
        VALUES(V_ROOM_CODE,V_ROOM_NAME);
    END IF;
    
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE PRC_COURSE_INSERT
(   
    V_COURSE_NAME   IN TBL_COURSE.COURSE_NAME%TYPE
)
IS
    V_COUNT NUMBER;
    V_NUM NUMBER;
    V_COURSE_CODE TBL_COURSE.COURSE_CODE%TYPE;
BEGIN

    SELECT COUNT(COURSE_CODE) INTO V_COUNT
    FROM TBL_COURSE
    WHERE COURSE_NAME = V_COURSE_NAME;
    
    SELECT MAX(TO_NUMBER(SUBSTR(COURSE_CODE,7)))+1 INTO V_NUM
    FROM TBL_COURSE;
    
    V_COURSE_CODE := 'COURSE' || TO_CHAR(V_NUM);
    
    IF (V_COUNT = 0)
        THEN INSERT INTO TBL_COURSE(COURSE_CODE, COURSE_NAME)
        VALUES(V_COURSE_CODE,V_COURSE_NAME);
    END IF;
    
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE PRC_COP_INSERT
(
    V_COURSE_CODE   IN TBL_COURSE.COURSE_CODE%TYPE
,   V_COP_START     IN TBL_COPEN.COP_START%TYPE
,   V_COP_END       IN TBL_COPEN.COP_END%TYPE
,   V_ROOM_CODE     IN TBL_ROOM.ROOM_CODE%TYPE
,   V_COP_DATE      IN TBL_COPEN.COP_DATE%TYPE
)
IS
    V_COP_CODE      TBL_COPEN.COP_CODE%TYPE;
    V_ROOM_START    TBL_COPEN.COP_START%TYPE;
    V_ROOM_END      TBL_COPEN.COP_END%TYPE;
    USE_ROOM        EXCEPTION;
    V_COUNT         NUMBER;
    V_NUM           NUMBER;
    
BEGIN
    
    SELECT COUNT(COP_CODE) INTO V_COUNT
    FROM TBL_COPEN
    WHERE ROOM_CODE = V_ROOM_CODE;
    
    IF (V_COUNT > 0)
        THEN SELECT COP_START, COP_END INTO V_ROOM_START, V_ROOM_END
        FROM TBL_COPEN
        WHERE ROOM_CODE = V_ROOM_CODE;
        
        IF((V_ROOM_START >= V_COP_START AND V_ROOM_END <= V_COP_END)
            OR V_ROOM_END < V_COP_START OR V_ROOM_START < V_ROOM_END)
            THEN RAISE USE_ROOM;
        END IF;
    END IF;
    
    SELECT MAX(TO_NUMBER(SUBSTR(COP_CODE,6)))+1 INTO V_NUM
    FROM TBL_COPEN;
    
    V_COP_CODE := 'COPEN' || TO_CHAR(V_NUM);
    
    INSERT INTO TBL_COPEN(COP_CODE, COURSE_CODE, COP_START, COP_END, ROOM_CODE, COP_DATE)
    VALUES(V_COP_CODE, V_COURSE_CODE, V_COP_START, V_COP_END, V_ROOM_CODE, V_COP_DATE);
    
    COMMIT;
    
    EXCEPTION 
        WHEN USE_ROOM
            THEN RAISE_APPLICATION_ERROR(-20012, '사용중인 강의실입니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK; 
END;
--==>> Procedure PRC_COP_INSERT이(가) 컴파일되었습니다.


-- 과정 삭제 (관리자)
CREATE OR REPLACE PROCEDURE PRC_COP_DELETE
(
 V_COP_CODE IN TBL_COPEN.COP_CODE%TYPE
)
IS
    V_COUNT             NUMBER;
    V2_COUNT            NUMBER;
    USER_DEFINE_ERROR   EXCEPTION;
    DATE_ERROR          EXCEPTION;
    SOP_ERROR           EXCEPTION;
    
    V_COP_START TBL_COPEN.COP_START%TYPE;
    V_COP_END   TBL_COPEN.COP_END%TYPE;
    
BEGIN
    
    SELECT COUNT(COP_CODE) INTO V_COUNT
    FROM TBL_REGIST
    WHERE COP_CODE = V_COP_CODE;
    
    SELECT COUNT(COP_CODE) INTO V2_COUNT
    FROM TBL_SOPEN
    WHERE COP_CODE = V_COP_CODE;
    
    IF (V_COUNT > 0 )
        THEN RAISE USER_DEFINE_ERROR;
    ELSIF (V2_COUNT > 0 )
        THEN RAISE SOP_ERROR;
    END IF;
    
    
    -- 날짜
    SELECT COP_START, COP_END INTO V_COP_START, V_COP_END
    FROM TBL_COPEN
    WHERE COP_CODE = V_COP_CODE;
    
    IF (V_COP_START < SYSDATE AND V_COP_END > SYSDATE)
        THEN RAISE DATE_ERROR;
    END IF;
    
    DELETE FROM TBL_COPEN
    WHERE COP_CODE = V_COP_CODE;
    
    COMMIT;
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20008, '해당 과정에 이미 수강신청한 학생이 있습니다.');
            ROLLBACK;
        WHEN DATE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20009, '과정이 진행중입니다.');
            ROLLBACK;
        WHEN SOP_ERROR
            THEN RAISE_APPLICATION_ERROR(-20010, '해당 과정에 포함된 과목이 있습니다.');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;
--==>> Procedure PRC_COP_DELETE이(가) 컴파일되었습니다.


-- 도중 탈락 테이블에 추가, 성적 명단에서는 제외 (관리자)
CREATE OR REPLACE PROCEDURE PRC_FAIL_INSERT
(
    V_REGIST_CODE       IN TBL_FAIL.REGIST_CODE%TYPE
,   V_FAIL_DATE         IN TBL_FAIL.FAIL_DATE%TYPE
,   V_REASON_DROPOUT    IN TBL_REASON.REASON_DROPOUT%TYPE
,   V_SOP_CODE          IN TBL_SOPEN.SOP_CODE%TYPE
)
IS
    V_FAIL_CODE         TBL_FAIL.FAIL_CODE%TYPE;
    V_REASON_CODE       TBL_REASON.REASON_CODE%TYPE;
    V_NUM               NUMBER;
    V_COUNT             NUMBER;
    
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    
    SELECT COUNT(SOP_CODE) INTO V_COUNT
    FROM TBL_SOPEN
    WHERE SOP_CODE = V_SOP_CODE;
    
    IF(V_COUNT = 0 )
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    SELECT REASON_CODE INTO V_REASON_CODE
    FROM TBL_REASON
    WHERE REASON_DROPOUT = V_REASON_DROPOUT;
    
    SELECT MAX(TO_NUMBER(SUBSTR(FAIL_CODE,5)))+1 INTO V_NUM
    FROM TBL_FAIL;
    
    V_FAIL_CODE := 'FAIL' || TO_CHAR(V_NUM);
    
    DELETE FROM TBL_GRADE
    WHERE SOP_CODE = V_SOP_CODE AND REGIST_CODE = V_REGIST_CODE;
    
    INSERT INTO TBL_FAIL(FAIL_CODE, REGIST_CODE, FAIL_DATE, REASON_CODE)
    VALUES(V_FAIL_CODE, V_REGIST_CODE, V_FAIL_DATE, V_REASON_CODE);
    
    COMMIT;
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20011, '해당 과목이 존재하지 않습니다.');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
    
END;
--==>> Procedure PRC_FAIL_INSERT이(가) 컴파일되었습니다.

-- 과목 배점 부여 (교수)

    
    
END;

-- 학생 성적 입력 프로시저 (교수)===============================================
CREATE OR REPLACE PROCEDURE PRC_SCORE_INSERT
( V_REGIST_CODE     IN TBL_GRADE.REGIST_CODE%TYPE
, V_SOP_CODE        IN TBL_GRADE.SOP_CODE%TYPE
, V_GRADE_SILGI     IN TBL_GRADE.GRADE_SILGI%TYPE
, V_GRADE_PILGI     IN TBL_GRADE.GRADE_PILGI%TYPE
, V_GRADE_CHUL      IN TBL_GRADE.GRADE_CHUL%TYPE
, V_GRADE_DATE      IN TBL_GRADE.GRADE_DATE%TYPE
, V_PRO_ID          IN TBL_PRO.PROFESSOR_ID%TYPE
)
IS
    -- 과목코드 V
    V_COUNT         NUMBER;
    V_NUM           NUMBER;
    V_GRADE_CODE    TBL_GRADE.GRADE_CODE%TYPE;
    
    -- 중도탈락 예외처리 변수
    FAIL_ERROR EXCEPTION;
BEGIN
    -- SELECT V _과목코드
    
    SELECT COUNT(*) INTO V_COUNT
    FROM TBL_FAIL
    WHERE REGIST_CODE = V_REGIST_CODE;
    
    IF (V_COUNT >0)
        THEN RAISE FAIL_ERROR;
    END IF;
    
    SELECT MAX(TO_NUMBER(SUBSTR(GRADE_CODE,6)))+1 INTO V_NUM
    FROM TBL_GRADE;
    
    V_GRADE_CODE := 'GRADE' || TO_CHAR(V_NUM);
    
    -- SELECT V_과목코드
    INSERT INTO TBL_GRADE(GRADE_CODE, GRADE_SILGI, GRADE_PILGI, GRADE_CHUL, REGIST_CODE, SOP_CODE, GRADE_DATE)
    VALUES (V_GRADE_CODE, V_GRADE_SILGI, V_GRADE_PILGI, V_GRADE_CHUL, V_REGIST_CODE, V_SOP_CODE, SYSDATE);
    
    COMMIT;
    
    -- 중도탈락 예외발생
    EXCEPTION
        WHEN FAIL_ERROR
            THEN RAISE_APPLICATION_ERROR (-20004, '중도포기한 학생입니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;
--==>> Procedure PRC_SCORE_INSERT이(가) 컴파일되었습니다.

-- 학생 성적 수정, 삭제 (교수)

CREATE OR REPLACE PROCEDURE PRC_SCORE_UPDATE
( V_GRADE_CODE  IN TBL_GRADE.GRADE_CODE%TYPE
, V_GRADE_SILGI IN TBL_GRADE.GRADE_SILGI%TYPE
, V_GRADE_PILGI IN TBL_GRADE.GRADE_PILGI%TYPE
, V_GRADE_CHUL  IN TBL_GRADE.GRADE_CHUL%TYPE
)
IS
    V_SOP_CODE  TBL_SOPEN.SOP_CODE%TYPE;
    V_SOP_END   TBL_SOPEN.SOP_END%TYPE;
    DATE_OVER   EXCEPTION;
BEGIN

    SELECT SO.SOP_CODE, SO.SOP_END INTO V_SOP_CODE, V_SOP_END
    FROM TBL_SOPEN SO
        JOIN TBL_GRADE GR
        ON SO.SOP_CODE = GR.SOP_CODE
        WHERE GR.GRADE_CODE = V_GRADE_CODE;
        
    IF (V_SOP_END > SYSDATE)
        THEN RAISE DATE_OVER;
    END IF;

    UPDATE TBL_GRADE
    SET GRADE_SILGI = V_GRADE_SILGI, GRADE_PILGI = V_GRADE_PILGI, GRADE_CHUL = V_GRADE_CHUL
    WHERE GRADE_CODE = V_GRADE_CODE;
    
    COMMIT;
    
    EXCEPTION 
        WHEN DATE_OVER
            THEN RAISE_APPLICATION_ERROR(-20005, '성적 입력기간이 아닙니다.');
            ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;

END;
--==>> Procedure PRC_SCORE_UPDATE이(가) 컴파일되었습니다.

-- 학생 성적 삭제
CREATE OR REPLACE PROCEDURE PRC_SCORE_DELETE
( V_GRADE_CODE  IN TBL_GRADE.GRADE_CODE%TYPE
)
IS
BEGIN

    DELETE FROM TBL_GRADE
    WHERE GRADE_CODE = V_GRADE_CODE;
    
END;
--==>> Procedure PRC_SCORE_DELETE이(가) 컴파일되었습니다.


--만들어야하는 트리거

-- 교수 삭제 -> 과목개설삭제
CREATE OR REPLACE TRIGGER TRG_SOPEN_DELETE  
        BEFORE
        DELETE ON TBL_PRO
        FOR EACH ROW
BEGIN
    DELETE
    FROM TBL_SOPEN
    WHERE PROFESSOR_ID = :OLD.PROFESSOR_ID; 
END;
--==>> Trigger TRG_SOPEN_DELETE이(가) 컴파일되었습니다.

-- 과목개설삭제 -> 성적삭제
CREATE OR REPLACE TRIGGER TRG_GRADE_DELETE  
        BEFORE
        DELETE ON TBL_SOPEN
        FOR EACH ROW
BEGIN
    DELETE
    FROM TBL_GRADE
    WHERE SOP_CODE = :OLD.SOP_CODE; 
END;
--==>> Trigger TRG_GRADE_DELETE이(가) 컴파일되었습니다.

-- 학생 삭제 -> 수강신청삭제
CREATE OR REPLACE TRIGGER TRG_REGIST_DELETE  
        BEFORE
        DELETE ON TBL_STUDENT
        FOR EACH ROW
BEGIN
    DELETE
    FROM TBL_REGIST
    WHERE STUDENT_ID = :OLD.STUDENT_ID; 
END;
--==>> Trigger TRG_REGIST_DELETE이(가) 컴파일되었습니다.

-- 수강신청삭제 -> 도중탈락삭제, 성적삭제
CREATE OR REPLACE TRIGGER TRG_FAIL_GRADE_DELETE  
        BEFORE
        DELETE ON TBL_REGIST
        FOR EACH ROW
BEGIN
    DELETE
    FROM TBL_FAIL
    WHERE REGIST_CODE = :OLD.REGIST_CODE; 
    
    DELETE
    FROM TBL_GRADE
    WHERE REGIST_CODE = :OLD.REGIST_CODE;
END;
--==>> Trigger TRG_FAIL_GRADE_DELETE이(가) 컴파일되었습니다.

-- 과정개설삭제 -> 과목개설삭제, 수강신청삭제
CREATE OR REPLACE TRIGGER TRG_SOPEN_REGIST_DELETE  
        BEFORE
        DELETE ON TBL_COPEN
        FOR EACH ROW
BEGIN
    DELETE
    FROM TBL_SOPEN
    WHERE COP_CODE = :OLD.COP_CODE; 
    
    DELETE
    FROM TBL_REGIST
    WHERE COP_CODE = :OLD.COP_CODE;
END;
--==>> Trigger TRG_SOPEN_REGIST_DELETE이(가) 컴파일되었습니다.

CREATE OR REPLACE TRIGGER TRG_GRADE_DELETE  
        BEFORE
        DELETE ON TBL_SOPEN
        FOR EACH ROW
BEGIN
    DELETE
    FROM TBL_GRADE
    WHERE SOP_CODE = :OLD.SOP_CODE; 
END;
--==>> Trigger TRG_GRADE_DELETE이(가) 컴파일되었습니다.

--==============================================================================


--[뷰, 시퀀스]==================================================================

SELECT *
FROM VIEW_PROFESSOR_INFO;

--==>> [관리자] -> 배정받은 과목이 있는 교수자 정보 출력
CREATE OR REPLACE VIEW VIEW_PROFESSOR_INFO
AS
SELECT P.PROFESSOR_NAME "교수명", SJ.SUBJECT_NAME "배정된 과목", SO.SOP_START "과목시작날짜"
        , SO.SOP_END "과목종료날짜", BK.BOOK_NAME "교재명", RM.ROOM_NAME "강의실"
        , CASE WHEN (SO.SOP_END < SYSDATE) THEN '강의 종료'
               WHEN (SO.SOP_START < SYSDATE) AND (SO.SOP_END > SYSDATE) THEN '강의 중'
               WHEN (SO.SOP_START > SYSDATE) AND (SO.SOP_END > SYSDATE) THEN '강의 예정'
               ELSE '오류'
               END "강의진행여부"
FROM TBL_PRO P JOIN TBL_SOPEN SO
ON SO.PROFESSOR_ID = P.PROFESSOR_ID
        JOIN TBL_SUBJECT SJ
        ON SO.SUBJECT_CODE = SJ.SUBJECT_CODE 
        JOIN TBL_BOOK BK
        ON SO.BOOK_CODE = BK.BOOK_CODE
        JOIN TBL_COPEN CO
        ON SO.COP_CODE = CO.COP_CODE
        JOIN TBL_ROOM RM
        ON CO.ROOM_CODE = RM.ROOM_CODE;

INSERT INTO TBL_GRADE(GRADE_CODE, GRADE_SILGI, GRADE_PILGI, GRADE_CHUL, REGIST_CODE, SOP_CODE, GRADE_DATE)
VALUES('GRADE002', 60, 50, 90, 'REGIST01', 'SOP01', '2022-02-28');

-- [관리자] => 과정 출력 , 과목 출력
SELECT *
FROM VIEW_COURSE_INFO;

-- 과정명, 강의실, 과목명, 과목시작날짜, 과목종료날짜, 교재명, 교수명
CREATE OR REPLACE VIEW VIEW_COURSE_INFO
AS
SELECT CR.COURSE_NAME "과정명", RM.ROOM_CODE "강의실", SJ.SUBJECT_NAME "과목명"
     , SO.SOP_START "과목시작날짜" , SO.SOP_END "과목종료날짜", BK.BOOK_NAME "교재명"
     , P.PROFESSOR_NAME "교수명"
FROM TBL_COPEN CO 
        JOIN TBL_COURSE CR
        ON CO.COURSE_CODE = CR.COURSE_CODE
        JOIN TBL_ROOM RM
        ON CO.ROOM_CODE = RM.ROOM_CODE
        JOIN TBL_SOPEN SO
        ON CO.COP_CODE = SO.COP_CODE
        JOIN TBL_SUBJECT SJ
        ON SO.SUBJECT_CODE = SJ.SUBJECT_CODE
        JOIN TBL_BOOK BK
        ON SO.BOOK_CODE = BK.BOOK_CODE
        JOIN TBL_PRO P
        ON SO.PROFESSOR_ID = P.PROFESSOR_ID;
        
-- [관리자] => 학생 정보 출력
SELECT *
FROM VIEW_STUDENT_INFO;

-- 학생 이름, 과정명, 수강과목, 수강과목 총점
CREATE OR REPLACE VIEW VIEW_STUDENT_INFO
AS
SELECT STUDENT_NAME "이름", CR.COURSE_NAME "과정명", SJ.SUBJECT_NAME "수강과목"
     , GA.GRADE_SILGI + GA.GRADE_PILGI + GA.GRADE_CHUL "수강과목총점"
FROM TBL_STUDENT SD
        JOIN TBL_REGIST RG
        ON RG.STUDENT_ID = SD.STUDENT_ID
        JOIN TBL_COPEN CO
        ON CO.COP_CODE = RG.COP_CODE
        JOIN TBL_COURSE CR
        ON CO.COURSE_CODE = CR.COURSE_CODE
        JOIN TBL_GRADE GA
        ON GA.REGIST_CODE = RG.REGIST_CODE
        JOIN TBL_SOPEN SO
        ON SO.SOP_CODE = GA.SOP_CODE
        JOIN TBL_SUBJECT SJ
        ON SJ.SUBJECT_CODE = SO.SUBJECT_CODE;

-- [교수자] => 성적 출력
SELECT *
FROM VIEW_SCORE_INFO
WHERE 교수ID = 'PRO2';

-- 과목명, 과목시작날짜, 과목종료날짜, 교재명, 학생명, 출결, 실기, 필기, 총점, 등수
CREATE OR REPLACE VIEW VIEW_SCORE_INFO
AS
SELECT SJ.SUBJECT_NAME "과목명", SO.SOP_START "과목시작날짜", SO.SOP_END "과목종료날짜"
     , BK.BOOK_NAME "교재명", SD.STUDENT_NAME "학생명", GA.GRADE_CHUL "출결"
     , GA.GRADE_SILGI "실기", GA.GRADE_PILGI "필기"
     , GA.GRADE_CHUL + GA.GRADE_PILGI + GA.GRADE_SILGI "총점"
     , RANK() OVER(ORDER BY GA.GRADE_CHUL + GA.GRADE_PILGI + GA.GRADE_SILGI) "등수"
     , P.PROFESSOR_ID "교수ID"
FROM TBL_SOPEN SO
        JOIN TBL_PRO P
        ON SO.PROFESSOR_ID = P.PROFESSOR_ID
        JOIN TBL_SUBJECT SJ
        ON SJ.SUBJECT_CODE = SO.SUBJECT_CODE
        JOIN TBL_BOOK BK
        ON SO.BOOK_CODE = BK.BOOK_CODE
        JOIN TBL_GRADE GA
        ON GA.SOP_CODE = SO.SOP_CODE
        JOIN TBL_REGIST RG
        ON RG.REGIST_CODE = GA.REGIST_CODE
        JOIN TBL_STUDENT SD
        ON SD.STUDENT_ID = RG.STUDENT_ID;

-- [학생] => 성적 출력
-- 학생명, 과정명, 과목명, 과목시작날짜, 과목종료날짜, 교재명, 출결, 실기, 필기, 총점, 등수
SELECT *
FROM VIEW_STUDENT_SCORE_INFO
WHERE 학생ID = '20220001';

CREATE OR REPLACE VIEW VIEW_STUDENT_SCORE_INFO
AS
SELECT SD.STUDENT_NAME "학생명", CR.COURSE_NAME "과정명", SJ.SUBJECT_NAME "과목명" 
     , SO.SOP_START "과목시작날짜", SO.SOP_END "과목종료날짜"
     , BK.BOOK_NAME "교재명",  GA.GRADE_CHUL "출결"
     , GA.GRADE_SILGI "실기", GA.GRADE_PILGI "필기"
     , GA.GRADE_CHUL + GA.GRADE_PILGI + GA.GRADE_SILGI "총점"
     , RANK() OVER(ORDER BY GA.GRADE_CHUL + GA.GRADE_PILGI + GA.GRADE_SILGI) "등수"
     , SD.STUDENT_ID "학생ID"
FROM TBL_SOPEN SO
        JOIN TBL_PRO P
        ON SO.PROFESSOR_ID = P.PROFESSOR_ID
        JOIN TBL_SUBJECT SJ
        ON SJ.SUBJECT_CODE = SO.SUBJECT_CODE
        JOIN TBL_BOOK BK
        ON SO.BOOK_CODE = BK.BOOK_CODE
        JOIN TBL_GRADE GA
        ON GA.SOP_CODE = SO.SOP_CODE
        JOIN TBL_REGIST RG
        ON RG.REGIST_CODE = GA.REGIST_CODE
        JOIN TBL_STUDENT SD
        ON SD.STUDENT_ID = RG.STUDENT_ID
        JOIN TBL_COPEN CO
        ON SO.COP_CODE = CO.COP_CODE
        JOIN TBL_COURSE CR
        ON CR.COURSE_CODE = CO.COURSE_CODE
WHERE SO.SOP_END < SYSDATE;


-- 과목 날짜 UPDATE
UPDATE TBL_SOPEN
SET SOP_START = 시작날짜, SOP_END = 끝날짜
WHERE SOP_CODE = 과목개설코드;

-- 과목 배정교수 UPDATE
UPDATE TBL_SOPEN
SET PROFESSOR_ID = 바꿀담당교수ID
WHERE SOP_CODE = 과목개설코드;

-- 과목 배점 UPDATE
UPDATE TBL_SOPEN
SET SOP_SILGI = 실기배점, SOP_PILGI = 필기배점, SOP_CHUL = 출결배점
WHERE SOP_CODE = 과목개설코드;

-- 과목 과목명 변경
UPDATE TBL_SUBJECT
SET SUBJECT_NAME = 바꿀과목명
WHERE SUBJECT_CODE = 과목코드;

-- 과목 교재변경
UPDATE TBL_BOOK
SET BOOK_NAME = 바꿀교재명
WHERE BOOK_CODE = 교재코드;

-- 과정 수정 (관리자)

-- 과정 날짜 UPDATE
UPDATE TBL_COPEN
SET COP_START = 시작날짜, COP_END = 끝날짜
WHERE COP_CODE = 과정개설코드;

UPDATE TBL_COURSE
SET COURSE_NAME = 바꿀과정명
WHERE COURSE_CODE = 과정코드;

UPDATE TBL_ROOM
SET ROOM_NAME = 바꿀강의실명
WHERE ROOM_CODE = 강의실코드;


-- 과목 배점 부여 (교수)
UPDATE TBL_SOPEN
SET SOP_SILGI = 바꿀실기배점, SOP_PILGI = 바꿀필기배점, SOP_CHUL = 바꿀출결배점
WHERE SOP_CODE = 바꿀과목코드;






-- 로그인 --

EXEC PRC_ADMIN_LOGIN('ADMIN1', '0001');

EXEC PRC_PROFESSOR_LOGIN ('PRO1','1234567');

EXEC PRC_STUDENT_LOGIN ('20220001', '1214423');

EXEC PRC_LOGIN(3,'20220001','1214423');



-- 관리자 --

EXEC PRC_PRO_INSERT('PRO2', '서진수', '3234567');

EXEC PRC_RPO_UPDATE('PRO2', '김균도', '1111111');

EXEC PRC_PRO_DELETE ('PRO3');




EXEC PRC_STUDENT_INSERT ('20220006','신시은','2544632');

EXEC PRC_STUDENT_UPDATE ('20220006','신시은','2222222');

EXEC PRC_STUDENT_DELETE ('20220007');

EXEC PRC_SOP_PRO_UPDATE ('SOP1', 'PRO2'); 


--==>> 강의실 추가 프로시저
EXEC PRC_ROOM_INSERT('H강의장');
EXEC PRC_COURSE_INSERT('데이터베이스');
-- COURSE_CODE, COP_START, COP_END, ROOM_CODE, COP_DATE
EXEC PRC_COP_INSERT ('COURSE2', SYSDATE, TO_DATE('2022-06-30','YYYY-MM-DD'), 'ROOM2', SYSDATE);

EXEC PRC_COP_INSERT ('COURSE3', TO_DATE('2022-05-15','YYYY-MM-DD'), TO_DATE('2022-06-30','YYYY-MM-DD'), 'ROOM3', SYSDATE);

--==>> 강의장 사용 중이라면, 예외처리
EXEC PRC_COP_DELETE ('COPEN3');


EXEC PRC_SUBJECT_INSERT('JAVASCRIPT');
EXEC PRC_BOOK_INSERT('JAVASCRIPT의 정석');

EXEC PRC_SOP_INSERT ('S2', TO_DATE('2022-04-02','YYYY-MM-DD'), TO_DATE('2022-05-05','YYYY-MM-DD'), 'PRO1','COPEN2', 50, 30, 20, 'BOOK2', SYSDATE);
                

EXEC PRC_SOP_DELETE('SOP2');


INSERT INTO TBL_GRADE(GRADE_CODE, GRADE_SILGI, GRADE_PILGI, GRADE_CHUL, REGIST_CODE, SOP_CODE, GRADE_DATE)
VALUES('GRADE3', 80, 70, 50, 'REGIST3', 'SOP1', TO_DATE('2022-04-08','YYYY-MM-DD'));

INSERT INTO TBL_REGIST(REGIST_CODE, STUDENT_ID, COP_CODE, REGIST_DATE)
VALUES('REGIST3', '20220003', 'COPEN1', TO_DATE('2022-04-03','YYYY-MM-DD'));

EXEC PRC_FAIL_INSERT ('REGIST2', TO_DATE('2022-04-15','YYYY-MM-DD'), '개인사정', 'SOP1');


-- 교수--

EXEC PRC_SCORE_INSERT ('REGIST3', 'SOP1', 80, 80, 80, TO_DATE('2022-03-05','YYYY-MM-DD'), 'PRO2');
EXEC PRC_SCORE_UPDATE ('GRADE2', 50, 50, 50);
EXEC PRC_SCORE_DELETE ('GRADE2');

--==============================================================================





































